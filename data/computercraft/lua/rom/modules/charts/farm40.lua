--[[
##Chart for Fenced Farm with Pens, Cane, Crops, and Trees In 40 Block Span
```md
--:~ ":" <- **Chart 40 Block Farm Pens, Crops, Cane, and Tree Fields, and Fences** -> muse/docs/charts/farm40.md
--:+ _Executing a `chart` commnd naming this file creates `ranges` to place and orient a `farm` in Minecraft coordinates._
--:+ _The second argument of the command names the farm's corner `point` that will include a `fields` feature._
```Lua 
--]]
package.path = _G.Muse.package
local cores = require ("core"); local core = cores.core ---@module "signs.core"
local maps = require ("map"); local map = maps.map ---@module "signs.map"

-- Placements across width of farm: fenced pens, cane, then crops (with trees) and other fences.
local pensTo = 16; local fenceWest = pensTo + 1; -- width to block 16, 17
local caneFrom = fenceWest + 1; local caneTo = caneFrom + 2 -- 18, 20
local cropsFrom = caneTo + 1; local cropsTo = cropsFrom + 17 --21, 38
local fenceEast = cropsTo + 2 -- 40 (leaving room for last water strip of crops) 

local treeSpacing, defaultTrees, minimumLength, defaultLength = 3, 2, 5, 18
--[[
```
<a id="chart"></a> 
The farm's <a href="../../drawings/07ModelFarm.pdf" target="_blank"> layout </a> is established by defining relative ranges for `pens`, `cane`, `crops`, and `trees` fields. <a href="../../drawings/07ModelFarm.pdf" target="_blank"> <IMG SRC="../../drawings/07ModelFarm.png" ALIGN="right" hspace="10"/></a> The actual position and orientation of the farm is established relative to the `corner` specified in the `chart` command. Preparing the land for a farm involves levelling it. The `top` parameter specifies the height at which to start leveling. While the width of this farm is hardwired, the farm's length is set beyond a minimum by specifying the (relative) block at which it `ends`. The default is to end at block 18 of the farm's length. As seen in the layout, the `crops` and `trees` share a part of the farm's width. The maximum nuber of `rows` of trees (six trees to a row) leaves room in the shared width for the `crops`. 
```Lua
--]]

local faces = {SE = "north", NW = "south", NE = "west", SW = "east", ES = "north", WN = "south", EN = "west", WS = "east"}
local turns = {"ES", "WN", "EN", "WS"} -- farm layout rotation
 
local function chart(corner, toward, top, ends, treeFarmRows)
  --:# **chart farm40 corner toward top ends? treeFarmRows?? -> _Bounds and orientation, `ends` extends length in `>` direction._**
  --:+ `corner` _as point name establishes reference point for farm offsets extending from that point in `toward` direction._
  --:+ `toward`: NW (-x, -z>), SE (+x, +z>), SW (-x, +z>), NE (+x, -z>), WN (-z, -x>), ES (+z, +x>), WS (-z, +x>), EN (+z, -x>)
  --:+ `top` _sets the highest point (y-axis) in the farm area for levelling excavations and fills._
  --:+ `ends` (default 18) _indicates where the farm's lengths extend for pens, cane, and the crops and trees fields._
  --:+ `treeFarmRows` (default 2) _controls the area left over for farm crops by limiting the rows of trees._

  assert(corner and top, "farm40.chart: ?corner ?toward ?top ??ends ???treeFarmRows]]`") -- clue bad commands
  local extent = ends and math.floor(math.max(minimumLength, ends)) or defaultLength 
  local treeRows = treeFarmRows and math.floor(treeFarmRows) or defaultTrees
  local cropsEnds = extent - treeRows * treeSpacing - 1 

  -- + _Offsets from the `origin` define the relative bounds of each field (pens, cane, crops, and trees) of the farm._
  local offsets = { -- offsets from specified corner point
    pensNW = {0, "", 0}, pensSE = {pensTo, "", extent}, -- along the west edge all the way to south edge
    caneNW = {caneFrom, "", 1}, caneSE = {caneTo, "", extent - 1}, 
    cropsNW = {cropsFrom, "", 1}, cropsSE = {cropsTo, "", cropsEnds}, 
    treesNW = {cropsFrom, "", cropsEnds + 1}, treesSE = {cropsTo, "", extent - 1}, 
    fenceNW = {fenceWest, "", 0}, fenceNE = {fenceEast, "", 0}, -- fence on north edge
    fenceSW = {fenceWest, "", extent}, fenceSE = {fenceEast, "", extent}, -- fence on south edge
    fenceEN = {fenceEast, "", 1}, fenceES = {fenceEast, "", extent - 1}, -- fence on east edge
    edgeNW = {0, "", 0}, edgeSW = {0, "", extent}, -- west edge
  }
  
  local face = assert(faces[toward], "farm40.chart: "..toward.." not NW, SE, SW, NE, WN, ES, WS, or EN")
--[[
```
<a id="ranges"></a> 
The points defining the ranges of the farm are generated by <a href="../lib/map.html#locations" target ="_blank">`map.locations`</a>.  
```Lua
--]]
  -- + _Points are created by `map.locations` from offsets, corner, and extension direction for each `range` of the farm._
  local oriented = core.orient(offsets, face, turns[face] and "rotate")
  map.locations(oriented, corner, "farm40", tonumber(top)) -- `offsets` = `pattern`
  
  map.op {"range", "pens40", "farm40", "pensNW", "pensSE", "fields", "pens"}; local pens = "pens40"
  map.op {"range", "trees40", "farm40", "treesNW", "treesSE", "fields", "trees"}; local trees = "trees40"
  map.op {"range", "cane40", "farm40", "caneNW", "caneSE", "fields", "cane"}; local canes = "cane40"
  map.op {"range", "crops40", "farm40", "cropsNW", "cropsSE", "fields", "crops"}; local crops = "crops40"
  map.op {"range", "north40", "farm40", "fenceNW", "fenceNE", "fences", "north40"}; local north = "north40"
  map.op {"range", "south40", "farm40", "fenceSW", "fenceSE", "fences", "south40"}; local south = "south40"
  map.op {"range", "east40", "farm40", "fenceEN", "fenceES", "fences", "east40"}; local east = "east40"
  map.op {"range", "west40", "farm40", "edgeNW", "edgeSW", "edges", "west40"}; local west = "west40"
  
  --:# **The farm's `fields` feature has keys for ranges setting bounds for the farm's `fields`, `fences`, and `edges`.**
  --:+ _The ranges are animal `pens`, `trees`, sugar `canes`, and other `crops` ranges with `fields` features._
  --:+ _As well as `north`, `east`, and `south` ranges with `fences` features and a `west` side (place holder) `edges` range._
  --:+ _Apply `field` operations defined for a `farm` for` fields` ranges. Build fences with the `fence` command for `fences`._

  local ranges = {
    pens = pens, trees = trees, canes = canes, crops = crops, -- `fields` 
    north = north, south = south, east = east, west = west} -- `fences` and `edges`
  
  map.put(corner, "fields", ranges) -- {{pens = pens, ...}} farm dictionary keys are names of fields
  return "charts/farm40 charted from "..corner.." toward "..toward 
end

return chart(...)
